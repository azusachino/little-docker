# zookeeper zoo.cfg
apiVersion: v1
kind: ConfigMap
metadata:
  name: zookeeper-config
  labels:
    app: zookeeper
data:
  # default support empty cfg
  zoo.cfg: |
---
# zookeeper env
apiVersion: v1
kind: ConfigMap
metadata:
  name: zookeeper-env
  labels:
    app: zookeeper
data: # check https://github.com/bitnami/bitnami-docker-zookeeper
  ZOO_PORT_NUMBER: "2181"
  ZOO_TICK_TIME: "2000"
  ZOO_INIT_LIMIT: "10"
  ZOO_SYNC_LIMIT: "5"
  ZOO_MAX_CLIENT_CNXNS: "60"
  # <service>.<namespace>.<cluster-domain>:<port>
  ZOO_SERVERS: "
                zookeeper-0.zookeeper-headless:2888:3888,
                zookeeper-1.zookeeper-headless:2888:3888,
                zookeeper-2.zookeeper-headless:2888:3888
               "
  ZOO_ENABLE_AUTH: "no"
  ZOO_HEAP_SIZE: "1024"
  ZOO_LOG_LEVEL: "ERROR"
  ALLOW_ANONYMOUS_LOGIN: "yes"
---
# 部署 Service Headless，用于Zookeeper间相互通信
apiVersion: v1
kind: Service
metadata:
  name: zookeeper-headless
  labels:
    app: zookeeper
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: client
      port: 2181
      targetPort: client
    - name: follower
      port: 2888
      targetPort: follower
    - name: election
      port: 3888
      targetPort: election
  selector:
    app: zookeeper
---
# 部署 Service，用于外部访问
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
  labels:
    app: zookeeper
spec:
  type: ClusterIP
  ports:
    - name: client
      port: 2181
      targetPort: client
    - name: follower
      port: 2888
      targetPort: follower
    - name: election
      port: 3888
      targetPort: election
  selector:
    app: zookeeper
---
# StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zookeeper
  labels:
    app: zookeeper
spec:
  selector:
    matchLabels:
      app: zookeeper
  serviceName: zookeeper-headless  #声明它属于哪个Headless Service.
  replicas: 3
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      name: zookeeper
      labels:
        app: zookeeper
    spec:
      securityContext:
        fsGroup: 1001
      containers:
        - name: zookeeper
          image: mirror.gcr.io/bitnami/zookeeper:3.7.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 1001
          command:
            - bash
            - -ec
            - |
              # Execute entrypoint as usual after obtaining ZOO_SERVER_ID based on POD hostname
              HOSTNAME=`hostname -s`
              if [[ $HOSTNAME =~ (.*)-([0-9]+)$ ]]; then
                ORD=${BASH_REMATCH[2]}
                export ZOO_SERVER_ID=$((ORD+1))
              else
                echo "Failed to get index from hostname $HOST"
                exit 1
              fi
              exec /entrypoint.sh /run.sh
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 250m
              memory: 256Mi
          envFrom:
            - configMapRef:
                name: zookeeper-env
          ports:
            - name: client
              containerPort: 2181
            - name: follower
              containerPort: 2888
            - name: election
              containerPort: 3888
          livenessProbe:
            tcpSocket:
              port: client
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            tcpSocket:
              port: client
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          volumeMounts:
            # persistent data
            - mountPath: /bitnami/zookeeper
              name: data
            # config file
  #            - name: config
  #              mountPath: /opt/bitnami/zookeeper/conf/zoo.cfg
  #              subPath: zoo.cfg
  #      volumes:
  #        - name: config
  #          configMap:
  #            name: zk-config
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        storageClassName: standard
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
